Parameters:
# whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
  EnvironmentName:
    Type: String
  MinAutoScalingSize:
    Description: The min size for the web app auto scaling group
    Type: String
  MaxAutoScalingSize:
    Description: The max size for the web app auto scaling group
    Type: String
  AMI:
    Description: 'Machine Image to be used. Default is set to an AMI
    in the us-west-2 region.'
    Type: String
    Default: ami-06d51e91cea0dac8d
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.medium
    ConstraintDescription: Must be a valid EC2 instance type greater than 4GB RAM.
  KeyName:
    Description: 'Key name for existing ssh key pair'
    Type: String
    Default: uda-key
    ConstraintDescription: Must be an existing keypair

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balancer security group
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebAppSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupEgress: 
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: 
          Fn::ImportValue: 
            !Sub ${EnvironmentName}-Bastion-Security-Group
  
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      SecurityGroups:
        - Ref: LBSecGroup
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
  
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - WebAppLB
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      Protocol: HTTP
      Port: 80
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 5
  
  WebAppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - WebAppLB
      - WebAppTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB 
      Port: 80
      Protocol: HTTP

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  AppProfileRoles:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: !Ref MinAutoScalingSize
      MaxSize: !Ref MaxAutoScalingSize
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-PRIV-NET"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref AppProfileRoles
      SecurityGroups:
        - Ref: WebAppSecGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: '10'

  WebAppListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: 
        Ref: WebAppListener
      Priority: 1
    
Outputs:
  LoadBalancerDNS:
    Description: DNS of load balancer
    Value: 
      Fn::Join:
        - ''
        - - http://
          - Fn::GetAtt: [WebAppLB, DNSName]